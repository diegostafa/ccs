grammar;

use std::str::FromStr;

use crate::ast::*;
use crate::process::*;

Empty: () = ();
Whitespace: () = r"\s+";
Ident: String = r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string();
Number: u32 = r"[0-9]+" => FromStr::from_str(<>).unwrap();

pub ProgramNode: Program = { <stmts:StatementList> => Program(stmts) }

StatementNode: Statement = {
    "fn main" "()""{" <body:ProcessNode> "}" => Statement::DefConstant("main".to_string(), body),
    "fn" <name:Ident> "()" "{" <body:ProcessNode> "}" => Statement::DefConstant(name, body),
}
ProcessNode: Process =
{
    #[precedence(level="1")]
    "nil" => Process::nil(),
    <x:Ident> "()"=> Process::constant(x),

    #[precedence(level="2")]
    <m:ChannelNode> "." <p:ProcessNode> => Process::action(m, p),
    <m:ChannelNode> "." => Process::action(m, Process::nil()),
    "(" <par:ParProcessList> ")" => par,
    "(" <sum:SumProcessList> ")" => Process::sum(sum),
    "(" <p:ProcessNode> "\\" "{" <chans:VarList> "}" ")" => Process::restriction(p, chans),
    "(" <p:ProcessNode> "[" <subs:SubstitutionList> "]" ")" => Process::substitution(p, Substitution::new(subs)),
}
ChannelNode: Channel = {
    "tau" => Channel::tau(),
    <x:Ident> "!" => Channel::Send(x),
    <x:Ident> "?" => Channel::Recv(x),
}
StatementList: Vec<Statement> = {
    <head:StatementNode> => vec![head],
    <head:StatementNode> <tail:StatementList> => [vec![head], tail].concat(),
}
SumProcessList: Vec<Process> = {
    <head:ProcessNode> => vec![head],
    <head:ProcessNode> "+" <tail:SumProcessList> => [vec![head], tail].concat(),
}
ParProcessList: Process = {
    <l:ProcessNode> "|" <r:ProcessNode> => Process::par(l, r),
    <head:ProcessNode> "|" <tail:ParProcessList> => Process::par(head, tail),
}
VarList: Vec<String> = {
    <Empty> => vec![],
    <head:Ident> => vec![head],
    <head:Ident> "," <tail:VarList> => [vec![head], tail].concat(),
}
SubstitutionList: Vec<(String, String)> = {
    <new:Ident> "/" <old:Ident> => vec![(new, old)],
    <new:Ident> "/" <old:Ident> "," <tail:SubstitutionList> => [vec![(new, old)], tail].concat(),
}